# gcc    = gcc cl frontend
# sparse = sparse cl frontend

#array

#bool
bool/b-01.c.dot                          ;gcc splits bool expression into bbs (high CFG granularity)
bool/b-01.c-f01.dot                      ;gcc splits bool expression into bbs (high CFG granularity)

#fwnull
fwnull/fwn-02.c-test1.dot                ;gcc splits non-bool test into bool generation and test itself (extra instruction)

fwnull/fwn-04.c.dot                      ;gcc has much more local jumps (merges two branches *only* to jump further)
fwnull/fwn-04.c-test3.dot                ;gcc has much more local jumps (merges two branches *only* to jump further)

fwnull/fwn-05.c-test4.dot                ;gcc splits non-bool test into bool generation and test itself (extra instruction) + sparse's instruction before ret

#stdprgs
stdprgs/fact.c-factorial.dot             ;gcc splits non-bool test into bool generation and test itself (extra instruction) + sparse's instruction before ret
stdprgs/fact.c-factorial_from_string.dot ;gcc splits non-bool test into bool generation and test itself (extra instruction) + sparse's instruction before ret
stdprgs/fact.c-main.dot                  ;sparse generates extra instruction (connected with unssa)

#string

#struct
struct/s-01.c-return_struct.dot          ;sparse is more direct wrt accessing/handling structures
struct/s-02.c-return_int.dot             ;sparse is more direct wrt accessing/handling structures
struct/ss-01.c-return_sstruct.dot        ;sparse is more direct wrt accessing/handling structures
struct/ss-02.c-return_struct.dot         ;sparse is more direct wrt accessing/handling structures
struct/ss-03.c-return_int.dot            ;sparse is more direct wrt accessing/handling structures

#union
union/u-01.c-handle_union.dot            ;gcc does extra job preparing an argument for call
